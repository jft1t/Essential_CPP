01 pointer (指针) 与 reference (引用)
  (1) 定义和性质不同
    int a = 996;
    int *p = &a; // p是指针, &在此是求地址运算
    int &r = a; // r是引用, &在此起标识作用
  (2) 指针可以有多级，引用只能是一级
    int **p; // 合法
    int &&a; // 不合法
  (3) 指针可以在定义的时候不初始化，引用必须在定义的时候初始化
    int *p; // 合法
    int &r; // 不合法
    int a = 996;
    int &r = a; // 合法
  (4) 指针可以指向NULL，引用不可以为NULL
    int *p = NULL; // 合法
    int &r = NULL; // 不合法
  (5) 指针初始化之后可以再改变，引用不可以
    int a = 996;
    int *p = &a; // 初始化, p 是 a 的地址
    int &r = a; // 初始化, r 是 a 的引用

    int b = 885;
    p = &b;	// 合法, p 更改为 b 的地址
    r = b; 	// 不合法, r 不可以再变

02 模板函数 function template
  可以在使用中自动加载参数类型，避免反复重载
  如, template<typename T> void Swap(T &a, T &b) {
        T temp = a;
        a = b;
        b = temp;
      }

03 函数指针 
  可以指向具有相同 参数列表 与 返回类型 的系列函数
  (1)定义
    返回类型* （*指针名称）（参数列表）
    如, const vector<int>* (*seq_ptr)(int);
  (2)赋值
    只需要传递函数名称即可
    如, seq_ptr = fibo_seq;
  
  利用指针数组可以实现循环访问不同函数，如，
    const vector<int>* (*seq_array[])(int) = {
      fibo_seq, lucas_seq, ...
    };

04 头文件
  (1) 头文件里包含的是函数的声明
    -> 注意：函数的定义只能有一份
      在头文件中包含函数指针时，使用 extern 关键字使定义成为声明
  (2) "" 与 <>
    "" 被视为用户的头文件，在当前磁盘目录寻找
    <> 被视为标准的头文件，在特定磁盘目录寻找